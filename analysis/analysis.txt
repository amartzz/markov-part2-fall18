This is the analysis for Markov Part 2, Fall 2018

Ana Martinez apm36
 Answer the questions from the assignment 
that are reproduced below

(1) Determine (from running Benchmark.java) how long it takes for 
BaseMarkov to generate 2,000, 4,000, 8,000, 16,000, and 32,000 
random characters using the default file and an order 5 Markov Model. 
Include these timings in your report. 
	For BaseMarkov:
	Starting tests

time	source	#chars
0.190	507914	2000
0.389	507914	4000
0.775	507914	8000
1.587	507914	16000
3.581	507914	32000

0.468	507914	4096
0.902	1015828	4096
1.359	1523742	4096
1.844	2031656	4096
2.378	2539570	4096
2.685	3047484	4096
3.138	3555398	4096
3.590	4063312	4096
4.067	4571226	4096
4.563	5079140	4096

Finished tests
	

The program also generates 4,096 characters using texts that increase in 
size from 496,768 characters to 4,967,680 characters (10 times the number).  
Do you the timings support the O(NT) analysis for BaseMarkov?

Yes, this is order O(NT) because the efficiency of the method BaseMarkov.getFollows
is O(N); then the other method in the class is O(T) which results in O(NT).


(2) Determine (from running Benchmark.java) how long it takes for 
EfficientMarkov to generate 2,000, 4,000, 8,000, 16,000, and 32,000 
random characters using the default file and an order 5 Markov Model. 
Include these timings in your report.
	For EfficientMarkov:
	Starting tests

time	source	#chars
0.155	507914	2000
0.140	507914	4000
0.147	507914	8000
0.181	507914	16000
0.142	507914	32000

0.145	507914	4096
0.289	1015828	4096
0.383	1523742	4096
0.488	2031656	4096
0.691	2539570	4096
0.797	3047484	4096
0.903	3555398	4096
1.067	4063312	4096
1.192	4571226	4096
1.372	5079140	4096

Finished tests
 
The program also generates 4,096 characters using texts that increase in 
size from 496,768 characters to 4,967,680 characters (10 times the number).  
Do the timings support the O(N+T) analysis for EfficientMarkov?

Yes, the efficiency is O(N+T) rather than O(NT) because by using the hashmap we change
the complexity of getFollows to O(1), which results in the whole class having efficiency
O(N+T).

(3)The tests in the class Benchmark use an order-5 Markov Model. 
Run tests that you think are appropriate to determine if the order of the 
Markov Model has a significant impact on the running time for BaseMarkov. 
Explain your reasoning.

Ran order 3 test:
Starting tests

time	source	#chars
0.346	507914	2000
0.584	507914	4000
1.669	507914	8000
3.221	507914	16000
5.419	507914	32000

0.739	507914	4096
2.182	1015828	4096
2.847	1523742	4096
3.333	2031656	4096
4.140	2539570	4096
5.218	3047484	4096
5.706	3555398	4096
6.153	4063312	4096
4.802	4571226	4096
6.160	5079140	4096

Finished tests


Ran order 10 test:
Starting tests

time	source	#chars
0.176	507914	2000
0.358	507914	4000
0.722	507914	8000
1.739	507914	16000
3.332	507914	32000

0.405	507914	4096
0.863	1015828	4096
1.270	1523742	4096
1.718	2031656	4096
2.776	2539570	4096
4.101	3047484	4096
4.836	3555398	4096
5.564	4063312	4096
6.632	4571226	4096
6.233	5079140	4096

Finished tests


Clearly the shorter the wordgram, the longer the program takes to run.
This makes sense because if the wordgram is shorter it needs to create more wordgrams
total and needs to scan the remaining words more times than if it's a longer wordgram.